/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main.java.com.Gym360.view.admin.payroll;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

import main.java.com.Gym360.controller.CalculadoraNomina;
import main.java.com.Gym360.model.classes.Empleado;
import main.java.com.Gym360.model.classes.Nomina;
import main.java.com.Gym360.model.dao.EmpleadoDAO;
import main.java.com.Gym360.model.dao.NominaDAO;
import main.java.com.Gym360.util.ui.CambiarIU;

/**
 *
 * @author tutaa
 */
//Todo: modificar nomina
public class PayrollUser extends javax.swing.JFrame {

        public static int idUsuarioSeleccionado = -1;

        /**
         * Creates new form ManageUsersScreen
         */
        public PayrollUser() {
                initComponents();
                this.setTitle("Nómina");
                this.setResizable(false);
                this.setLocationRelativeTo(null);
                this.setIconImage(Toolkit.getDefaultToolkit()
                                .getImage(getClass().getResource("/main/resources/images/logo.png")));
                cargarTablaNomina("");
                CambiarIU.deshabilitarBotones(btnCalcularNomina);
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                panelNominaEmpleados = new javax.swing.JPanel();
                pMenu = new javax.swing.JPanel();
                lbBackButton = new javax.swing.JLabel();
                lbHistorialPagos = new javax.swing.JLabel();
                spTablaHistorialPagos = new javax.swing.JScrollPane();
                tTablaHistorialPagos = new javax.swing.JTable();
                imgCalcularNomina = new javax.swing.JLabel();
                btnCalcularNomina = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                panelNominaEmpleados.setBackground(new java.awt.Color(245, 245, 245));
                panelNominaEmpleados.setMaximumSize(new java.awt.Dimension(1467, 800));
                panelNominaEmpleados.setMinimumSize(new java.awt.Dimension(1467, 800));
                panelNominaEmpleados.setPreferredSize(new java.awt.Dimension(1467, 800));
                panelNominaEmpleados.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                pMenu.setBackground(new java.awt.Color(93, 0, 0));
                pMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                lbBackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/resources/images/back.png"))); // NOI18N
                lbBackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                lbBackButton.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                lbBackButtonMouseClicked(evt);
                        }
                });
                pMenu.add(lbBackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 40));

                lbHistorialPagos.setBackground(new java.awt.Color(0, 0, 0));
                lbHistorialPagos.setFont(new java.awt.Font("Inter", 1, 36)); // NOI18N
                lbHistorialPagos.setForeground(new java.awt.Color(245, 245, 245));
                lbHistorialPagos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                lbHistorialPagos.setText("NOMINA EMPLEADOS");
                lbHistorialPagos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                pMenu.add(lbHistorialPagos, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 60));

                panelNominaEmpleados.add(pMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 60));

                tTablaHistorialPagos.setBackground(new java.awt.Color(232, 232, 232));
                tTablaHistorialPagos.setFont(new java.awt.Font("Inter", 0, 18)); // NOI18N
                tTablaHistorialPagos.setForeground(new java.awt.Color(20, 20, 20));
                tTablaHistorialPagos.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {"Juan Pérez", "juan@email.com", " Administrador", "Activo"},
                                {"María López ", "maria@email.com", "Empleado", "Inactivo"},
                                {"Carlos Ruiz", "carlos@email.com", "Cliente", "Activo"},
                                {null, null, null, null}
                        },
                        new String [] {
                                "Nombre", "Correo", "Rol", "Estado"
                        }
                ));
                tTablaHistorialPagos.setShowGrid(false);
                tTablaHistorialPagos.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                tTablaHistorialPagosMouseClicked(evt);
                        }
                });
                spTablaHistorialPagos.setViewportView(tTablaHistorialPagos);

                panelNominaEmpleados.add(spTablaHistorialPagos, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 820, 530));

                imgCalcularNomina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main/resources/images/calcularNomina.png"))); // NOI18N
                panelNominaEmpleados.add(imgCalcularNomina, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 650, -1, 50));

                btnCalcularNomina.setBackground(new java.awt.Color(93, 0, 0));
                btnCalcularNomina.setFont(new java.awt.Font("Inter", 1, 18)); // NOI18N
                btnCalcularNomina.setForeground(new java.awt.Color(200, 200, 200));
                btnCalcularNomina.setText("     Calcular Nómina");
                btnCalcularNomina.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                btnCalcularNomina.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                btnCalcularNominaActionPerformed(evt);
                        }
                });
                panelNominaEmpleados.add(btnCalcularNomina, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 650, 270, 50));

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelNominaEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, 1011, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelNominaEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void tTablaHistorialPagosMouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = tTablaHistorialPagos.getSelectedRow();

                idUsuarioSeleccionado = Integer.parseInt(tTablaHistorialPagos.getValueAt(selectedRow, 6).toString());
                if (idUsuarioSeleccionado != -1) {
                        CambiarIU.habilitarBotones(btnCalcularNomina);
                }
        }

        private void btnCalcularNominaActionPerformed(java.awt.event.ActionEvent evt) {
                calcularNomina();

        }

        private void lbBackButtonMouseClicked(java.awt.event.MouseEvent evt) {
                PayrollManagementScreen pm = new PayrollManagementScreen();
                pm.setVisible(true);
                this.setVisible(false);
        }

        public void cargarTablaNomina(String filtro) {
                NominaDAO nominaDAO = new NominaDAO();
                EmpleadoDAO empleadoDAO = new EmpleadoDAO();
                List<Nomina> nominas;

                if (filtro == null || filtro.trim().isEmpty()) {
                        nominas = nominaDAO.obtenerTodos();
                } else {
                        nominas = nominaDAO.obtenerTodos(); // Aquí podrías aplicar el filtro en el futuro
                }

                // Ahora incluimos columnas separadas para ID y nombre del empleado
                String[] columnas = { "ID Nómina", "Fecha", "Salario Base", "Deducciones", "Bonificaciones", "Total",
                                "ID Empleado", "Nombre Empleado" };
                DefaultTableModel model = new DefaultTableModel(columnas, 0);

                for (Nomina nomina : nominas) {
                        Empleado empleado = empleadoDAO.obtenerPorId(nomina.getIdEmpleado());
                        int idEmpleado = nomina.getIdEmpleado();
                        String nombreEmpleado = "No disponible";

                        if (empleado != null) {
                                nombreEmpleado = empleado.getNombre() + " " + empleado.getApellido();
                        }

                        double total = nomina.getSalarioBase() - nomina.getDeducciones() + nomina.getBonificaciones();

                        Object[] fila = { nomina.getIdNomina(), nomina.getFecha(), nomina.getSalarioBase(),
                                        nomina.getDeducciones(), nomina.getBonificaciones(), total, idEmpleado,
                                        nombreEmpleado };

                        model.addRow(fila);
                }

                tTablaHistorialPagos.setModel(model);
        }

        private void calcularNomina() {
                try {
                        EmpleadoDAO emDao = new EmpleadoDAO();
                        Empleado empleadoSeleccionado = emDao.obtenerPorId(idUsuarioSeleccionado);

                        if (empleadoSeleccionado == null) {
                                JOptionPane.showMessageDialog(this,
                                                "No se encontró información del empleado seleccionado.", "Error",
                                                JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        NominaDAO nominaDAO = new NominaDAO();
                        Nomina nomina = nominaDAO.obtenerPorEmpleado(empleadoSeleccionado.getIdEmpleado()); // <--
                                                                                                            // método
                                                                                                            // que
                                                                                                            // agregamos

                        if (nomina == null) {
                                JOptionPane.showMessageDialog(this,
                                                "No se encontró información de nómina para este empleado.", "Error",
                                                JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Solicitar horas extra
                        String mensajeHorasExtras = "Ingrese el número de horas extras trabajadas por "
                                        + empleadoSeleccionado.getNombre() + " " + empleadoSeleccionado.getApellido()
                                        + ":";
                        int horasExtras = Integer.parseInt(JOptionPane.showInputDialog(this, mensajeHorasExtras,
                                        "Horas Extras", JOptionPane.QUESTION_MESSAGE));

                        double salarioBase = empleadoSeleccionado.getSalario();
                        double valorHoraNormal = salarioBase / 160.0;
                        double pagoHorasExtra = horasExtras * valorHoraNormal * 1.5;

                        double bonificaciones = nomina.getBonificaciones();
                        double comisiones = 0; // Si no usas un campo separado para comisiones, puedes dejarlo en 0

                        double salarioBruto = salarioBase + pagoHorasExtra + bonificaciones + comisiones;
                        double totalDeducciones = nomina.getDeducciones(); // Tomadas de la base de datos

                        double salarioNeto = salarioBruto - totalDeducciones;

                        // Generar recibo
                        String reciboNomina = CalculadoraNomina.generarReciboNomina(empleadoSeleccionado, salarioBruto,
                                        totalDeducciones, salarioNeto);

                        JTextArea textArea = new JTextArea(reciboNomina);
                        textArea.setEditable(false);
                        textArea.setFont(new Font("Monospaced", Font.PLAIN, 18));
                        JScrollPane scrollPane = new JScrollPane(textArea);
                        scrollPane.setPreferredSize(new Dimension(400, 400));

                        JOptionPane.showMessageDialog(this, scrollPane,
                                        "Recibo de Nómina - " + empleadoSeleccionado.getNombre() + " "
                                                        + empleadoSeleccionado.getApellido(),
                                        JOptionPane.INFORMATION_MESSAGE);

                        idUsuarioSeleccionado = -1;

                } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this,
                                        "Error en el formato de los datos ingresados. Por favor, ingrese solo números.",
                                        "Error de formato", JOptionPane.ERROR_MESSAGE);
                } catch (NullPointerException e) {
                        JOptionPane.showMessageDialog(this, "Operación cancelada por el usuario.",
                                        "Operación cancelada", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Ocurrió un error al calcular la nómina: " + e.getMessage(),
                                        "Error", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                }
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton btnCalcularNomina;
        private javax.swing.JLabel imgCalcularNomina;
        private javax.swing.JLabel lbBackButton;
        private javax.swing.JLabel lbHistorialPagos;
        private javax.swing.JPanel pMenu;
        private javax.swing.JPanel panelNominaEmpleados;
        private javax.swing.JScrollPane spTablaHistorialPagos;
        private javax.swing.JTable tTablaHistorialPagos;
        // End of variables declaration//GEN-END:variables
}
